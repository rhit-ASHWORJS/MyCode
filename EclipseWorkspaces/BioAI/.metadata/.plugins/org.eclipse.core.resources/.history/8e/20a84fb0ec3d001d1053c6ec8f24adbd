import java.util.Arrays;

public class FeedForwardNeuralNet {
	double[][] networkWeights;
	double[] thresholds;
	int inputNodes;
	int outputNodes;
	
	public FeedForwardNeuralNet(double[][] networkWeights, double[] thresholds, int inputNodes, int outputNodes)
	{
		this.networkWeights = networkWeights;
		if(networkWeights.length != networkWeights[0].length)
		{
			System.err.println("FFNN declared with non-square matrix");
			this.networkWeights = null;
		}
		this.thresholds = thresholds;
		this.inputNodes = inputNodes;
		this.outputNodes = outputNodes;
	}
	
	public double[] runNeuralNetwork(double[] inputs)
	{
		if(inputs.length != inputNodes)
		{
			System.err.println("Wrong number of inputs to neural network.  Expected " +inputNodes + " but got "+inputs.length);
			return null;
		}
		
		double[] nodeValues = new double[networkWeights.length];
		for(int input=0; input<inputNodes; input++)
		{
			nodeValues[input] = inputs[input];
		}
		
		for(int workingNode=inputNodes; workingNode < networkWeights.length; workingNode++)
		{
			int sumOfInputs = 0;
			for(int otherNode=0; otherNode<workingNode; otherNode++)
			{
				if(nodeValues[otherNode] != 0)
				{
					sumOfInputs += nodeValues[otherNode]*networkWeights[otherNode][workingNode];
				}
			}
			if(sumOfInputs >= thresholds[workingNode])
			{
				nodeValues[workingNode] = 1;
			}
			else
			{
				nodeValues[workingNode] = 0;
			}
		}
		
		double[] outputs = new double[outputNodes];
		for(int output = 0; output < outputNodes; output++)
		{
			outputs[output] = nodeValues[nodeValues.length-outputNodes+output];
		}
		return outputs;
	}
	
	public void printTruthTable01()
	{
		double[] input = new double[inputNodes];
		
		while(Arrays.asList(input).contains(0))
		{
			
		}
	}
}
