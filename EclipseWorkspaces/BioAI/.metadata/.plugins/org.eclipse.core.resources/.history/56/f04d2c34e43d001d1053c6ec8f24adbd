import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JComponent;
import javax.swing.JFrame;

public class NetVisualizer {
	double[][] networkWeights;
	JFrame frame;
	
	public NetVisualizer(double[][] networkWeights)
	{
		this.networkWeights = networkWeights;
		this.initializeFrame();
	}
	
	public void swapNetwork(double[][] newNetworkWeights)
	{
		this.networkWeights = newNetworkWeights;
	}
	
	public void initializeFrame()
	{
		this.frame = new JFrame();
		this.frame.setSize(new Dimension(1000,1000));
		this.frame.add(new NetworkComponent());
		this.frame.setVisible(true);
		this.updateFrame();
	}
	
	public void updateFrame()
	{
		this.frame.repaint();
	}
	
	public class NetworkComponent extends JComponent {
		
		int circleRad = 70;
		int xoffset = 50;
		int yoffset = 50;
		int xstep = 200;
		int ystep = 200;
		
		public NetworkComponent() {
			
		}
		
		public void paint(Graphics g)
		{
			super.paint(g);
			g.translate(xoffset, yoffset);
                    
			Graphics2D g2d = (Graphics2D) g;
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
			
			int numNodes = networkWeights.length;//Won't work if it isn't a square
			
			int nodesPerRow=(int) Math.ceil(Math.sqrt(numNodes));
			
			int nodeDrawing = 0;
			while(nodeDrawing < numNodes)
			{
				int rowNum = nodeDrawing / nodesPerRow;
				int colNum = nodeDrawing - (nodesPerRow*rowNum);
				System.out.println("Drawing: " +rowNum+","+colNum);
				
				g2d.drawOval(rowNum*xstep, colNum*ystep, circleRad, circleRad);
				g2d.drawString("" + nodeDrawing, rowNum*xstep+circleRad/2, colNum*ystep+circleRad/2);
				
				
				nodeDrawing++;
			}
			
			g.translate(-xoffset, -yoffset);
		}
	}
}
